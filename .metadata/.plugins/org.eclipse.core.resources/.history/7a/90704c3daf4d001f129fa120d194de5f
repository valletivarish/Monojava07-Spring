package com.monocept.myapp.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.monocept.myapp.dto.EmployeeDTO;
import com.monocept.myapp.entity.Employee;
import com.monocept.myapp.exception.EmployeeNotFoundException;
import com.monocept.myapp.repository.EmployeeRepository;

@Service
public class EmployeeServiceImpl implements EmployeeService {

	private EmployeeRepository employeeRepository;

	public EmployeeServiceImpl(EmployeeRepository employeeRepository) {
		super();
		this.employeeRepository = employeeRepository;
	}

	@Override
	public List<EmployeeDTO> getAllEmployees() {
		List<Employee> employees = employeeRepository.findAll();
		return convertEmployeeListToEmployeeDtoList(employees);
	}

	@Override
	public EmployeeDTO getEmployeeById(int id) {
		Employee employee = employeeRepository.findById(id).orElse(null);
		if (employee == null) {
			throw new EmployeeNotFoundException("Employee with id " + id + " not found");
		}
		return convertEmployeeToEmployeeDto(employee);
	}

	@Override
	public EmployeeDTO saveAndUpdateEmployee(EmployeeDTO employeeDTO) {

		Employee newEmployee = convertEmployeeDTOToEmployee(employeeDTO);
		Employee save = null;
		if (newEmployee.getId() == 0) {
			newEmployee = employeeRepository.save(newEmployee);
			return convertEmployeeToEmployeeDto(newEmployee);
		}
		if (newEmployee.getId() != 0) {
			EmployeeDTO employeeById = getEmployeeById(newEmployee.getId());
			if (employeeById == null) {
				throw new EmployeeNotFoundException("Employee with id " + newEmployee.getId() + " not found");
			}
			save = employeeRepository.save(newEmployee);
		}
		return convertEmployeeToEmployeeDto(save);
	}

	private Employee convertEmployeeDTOToEmployee(EmployeeDTO employeeDTO) {
		Employee employee = new Employee();
		employee.setId(employeeDTO.getId());
		employee.setName(employeeDTO.getName());
		employee.setActive(employeeDTO.isActive());
		employee.setDesignation(employee.getDesignation());
		employee.setEmail(employeeDTO.getEmail());
		employee.setSalary(employeeDTO.getSalary());
		return employee;
	}

	private EmployeeDTO convertEmployeeToEmployeeDto(Employee employee) {
		EmployeeDTO employeeDTO = new EmployeeDTO();
		employeeDTO.setId(employee.getId());
		employeeDTO.setName(employee.getName());
		employeeDTO.setEmail(employee.getEmail());
		employeeDTO.setDesignation(employee.getDesignation());
		employeeDTO.setActive(employee.isActive());
		employeeDTO.setSalary(employee.getSalary());
		return employeeDTO;
	}

	private List<EmployeeDTO> convertEmployeeListToEmployeeDtoList(List<Employee> employees) {
		List<EmployeeDTO> employeesDto = new ArrayList<EmployeeDTO>();
		for (Employee employee : employees) {
			EmployeeDTO dto = new EmployeeDTO();
			dto.setId(employee.getId());
			dto.setName(employee.getName());
			dto.setEmail(employee.getEmail());
			dto.setDesignation(employee.getDesignation());
			dto.setActive(employee.isActive());
			dto.setSalary(employee.getSalary());
			employeesDto.add(dto);
		}
		return employeesDto;

	}

	@Override
	public void deleteEmployee(Employee employeeTemp) {
		employeeRepository.delete(employeeTemp);
	}

	@Override
	public Employee getEmployeeByName(String name) {
		return employeeRepository.findByName(name);
	}

	@Override
	public List<Employee> getEmployeeByActiveTrue() {
		return employeeRepository.findByActiveTrue();
	}

	@Override
	public List<Employee> getEmployeeByActiveFalse() {
		return employeeRepository.findByActiveFalse();
	}

	@Override
	public Employee getEmployeeByEmail(String email) {
		return employeeRepository.findByEmail(email);
	}

	@Override
	public List<Employee> getEmployeeNameStartingWith(String prefix) {
		return employeeRepository.findByNameStartingWith(prefix);
	}

	@Override
	public List<Employee> getEmployeeSalaryGreaterThanAndDepartment(double salary, String designation) {
		return employeeRepository.findBySalaryGreaterThanAndDesignation(salary, designation);
	}

	@Override
	public List<Employee> getEmployeeSalaryBetween(Double startSalary, Double endSalary) {
		return employeeRepository.findBySalaryBetween(startSalary, endSalary);
	}

	@Override
	public int getEmployeeCountAndActive() {
		return employeeRepository.countByActiveTrue();
	}

	@Override
	public int getEmployeeCountAndDesignation(String designation) {
		return employeeRepository.countByDesignation(designation);
	}

	@Override
	public int countSalaryGreaterthan(double salary) {
		return employeeRepository.countBySalaryGreaterThan(salary);
	}

}
